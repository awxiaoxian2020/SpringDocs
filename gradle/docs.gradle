import org.asciidoctor.gradle.jvm.AsciidoctorJPlugin
import org.asciidoctor.gradle.jvm.AsciidoctorTask

/**
 * Produce Javadoc for all Spring Framework modules in "build/docs/javadoc"
 */
apply plugin: "com.jcohy.docs"

ext{
	language = "zh-cn"
	component = project.name
	version = project.version
}

task aggregatedAsciidoctor(type: AsciidoctorTask) {
	project.rootProject.gradle.projectsEvaluated {
		Set<Project> excludedProjects = ['gradle-docs','spring-docs-build','checkstyle','spring-boot','spring-framework',
		'spring-hateoas','spring-security']
//		Set<Project> excludedProjects = []
		Set<Project> docsProjects = rootProject.subprojects.findAll {it != project }
				.findAll { it.plugins.hasPlugin(AsciidoctorJPlugin) }
				.findAll { !excludedProjects.contains(it.name) }

		dependsOn docsProjects.asciidoctor
		dependsOn docsProjects.asciidoctorPdf

		outputDir = project.file "${buildDir}/docs/javadoc"

		doFirst {
			attributes 'rootProject': "${rootProject.projectDir}",
					// resource attributes
					'doc-root' : "${docsRoot}",
					'sources-root':"${project.projectDir}/src",
					'image-resource': "http://resources.jcohy.com/jcohy-docs/images/${springBootVersion}/${project.name}",
					'image-dir': "http://resources.jcohy.com/jcohy-docs/images/${project.name}",

					// version attributes
					'spring-framework-version' : "${springVersion}",
					'spring-boot-version' : "${springBootVersion}",
					'spring-data-jpa-version' : "${springDataJpaVersion}",
					'spring-data-redis-version' : "${springDataRedisVersion}",
					'spring-data-rest-version' : "${springDataRestVersion}",
					'spring-data-commons-version' : "${springDataCommonsVersion}",
					'spring-security-version' : "${springSecurityVersion}",
					'spring-hateoas-version' : "${springHateoasVersion}",
					'gradle-version':"${gradleVersion}",
					'reactor-version' : "${reactorVersion}",
					'rfc-version' : "${rfcDocsVersion}",
					'checkstyle-version' : "${checkStyleVersion}",
					'spring-cloud-version' : "${springCloudVersion}",
					'spring-integration-version' : "${springIntegrationVersion}",
					'spring-webservices-version' : "${springWebservicesVersion}",

					// docs attributes
					'spring-docs-prefix' : "https://docs.spring.io/spring-framework/docs/",
					'spring-boot-docs' : "https://docs.spring.io/spring-boot/docs/",
					'spring-framework-docs' : "${docsRoot}/zh-cn/spring-framework/${springVersion}/spring-framework-reference/index.html",
					'spring-api-doc':"https://docs.spring.io/${project.name}",

					// sample attributes
					'gh-samples-url':"https://github.com/spring-projects/spring-security/master/${springSecurityVersion}/samples"
		}
	}
}

task docsZip(type: Zip) {
	dependsOn asciidoctor,
			asciidoctorPdf

	duplicatesStrategy "fail"
	from(asciidoctor.outputDir) {
		into "reference/htmlsingle"
	}
	from(asciidoctorPdf.outputDir) {
		into "reference/pdf"
		include "index.pdf"
		rename { "flight-framework-reference.pdf" }
	}
}

artifacts {
	archives docsZip
}

publishing {
	publications {
		maven(MavenPublication) {
			artifact docsZip
		}
	}
}
